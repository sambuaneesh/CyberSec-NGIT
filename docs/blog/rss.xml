<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Hello Viewer! ðŸ‘‹ Blog</title>
        <link>https://your-docusaurus-test-site.com/CyberSec-NGIT/blog</link>
        <description>Hello Viewer! ðŸ‘‹ Blog</description>
        <lastBuildDate>Mon, 27 Mar 2023 18:58:24 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Decision Tree Classifier]]></title>
            <link>https://your-docusaurus-test-site.com/CyberSec-NGIT/blog/decision-tree</link>
            <guid>https://your-docusaurus-test-site.com/CyberSec-NGIT/blog/decision-tree</guid>
            <pubDate>Mon, 27 Mar 2023 18:58:24 GMT</pubDate>
            <description><![CDATA[- It is a type of Greedy Algorithm]]></description>
            <content:encoded><![CDATA[<ul><li>It is a type of <strong>Greedy Algorithm</strong></li><li>In this we try to prepare a model by taking a set of features and try to prepare a binary tree where at the end of leaf notes we get a part of one feature only</li><li>So basically we are classifying the given features with their conditions and dividing them by borders and seperating them</li><li>example let the set of data be this<ul><li>let our sample feature set be <img loading="lazy" src="https://i.imgur.com/X2jL7pJ.png" class="img_ev3q"></li><li>where red is one type of feature and green is other</li><li>where x axis denotes $X_0$ and y axis denotes $X_1$</li></ul></li><li>the nodes other than <strong>Leaf Nodes</strong> are called <strong>Decision Nodes</strong>, we can find the required optimal decision for each node using information theory</li><li><img loading="lazy" src="https://i.imgur.com/MCqpXVY.png" class="img_ev3q"><ul><li>this is our decision tree, and leaf nodes consists of the classification</li></ul></li><li>even if we want to add a new entity, we follow the decision nodes starting from top and like binary search tree if go through the tree and place it in its respective position</li><li>this is known as a greedy algorithm as we are finding the best case for our immediate sub task only, not considering future states prehandedly</li><li>using <strong>Information Theory</strong>, entropy and all we get optimal decision conditions (cause there can be many we should choose optimal condition) (it comes under <strong>Information Gain</strong>)</li><li>note: we use object oriented programming for implementing ml algorithms for ease of use and to use it more effectively</li><li>we use other quantifier for decision nodes along with <strong>Entropy</strong> which is known as <strong>Gini Index</strong></li></ul>]]></content:encoded>
            <category>ml</category>
            <category>classifier</category>
            <category>decision-tree</category>
        </item>
        <item>
            <title><![CDATA[ARP Scan]]></title>
            <link>https://your-docusaurus-test-site.com/CyberSec-NGIT/blog/arp-scan</link>
            <guid>https://your-docusaurus-test-site.com/CyberSec-NGIT/blog/arp-scan</guid>
            <pubDate>Mon, 27 Mar 2023 18:56:21 GMT</pubDate>
            <description><![CDATA[ARP]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="arp">ARP<a href="#arp" class="hash-link" aria-label="Direct link to ARP" title="Direct link to ARP">â€‹</a></h2><ul><li>Address Resolution Protocol<ul><li>Basic ARP identifies MAC addresses and maps them to the IP addresses</li><li>the thing where it stores MAC address is known as ARP cache</li></ul></li><li>arp-scan is a command-line tool that uses the ARP protocol to discover and fingerprint IP hosts on the local network</li><li>arp-cache consists of associations our computer has learned about MAC addresses and IP addresses on the network<ul><li>initially we may get the one to the default gateway only</li></ul></li><li><code>arp -a</code> we get all the entries in the arp cache<ul><li>ex: <img loading="lazy" src="https://i.imgur.com/amp52LY.png" class="img_ev3q"></li><li>static type means it has been feeded statically whereas dynamic type means, it had to learn about it</li><li>physical address is the mapped MAC addresses</li></ul></li><li>we can delete a specific entry by <code>arp -d &lt;entry ip&gt;</code></li><li>but what if we want to send arp requests to an external web server<ul><li>we send it through the default gateway, that is in our case is the router</li><li>then router sends its mac address to the requester and then the requester sends the external web IP address to router and the router handles the rest</li></ul></li><li><code>sudo arp-scan -l</code> we get all the information about hosts in the network (but with arp cache, we may not still learn all the new info about computer)</li><li>but <code>-l</code> is very noisy and can be easily detectable</li><li>tools like netdiscover are used for stealthy scans</li><li>[<!-- -->[ARP Poisoning]<!-- -->] is a type of MITM where hacker utilizes these ARP requests to steal info</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="arp-poisoning">ARP Poisoning<a href="#arp-poisoning" class="hash-link" aria-label="Direct link to ARP Poisoning" title="Direct link to ARP Poisoning">â€‹</a></h2><ul><li>let this be our initial system <img loading="lazy" src="https://i.imgur.com/koBbVfx.png" class="img_ev3q"></li><li>then B turned out to be a hacker <img loading="lazy" src="https://i.imgur.com/kaPi0rs.png" class="img_ev3q"></li><li>observe A's intial ARP cache for default gateway which points to the router</li><li>now the hacker sends specific ARP requests to A where he changes the default gateway of A to his address, so now if A wants to communicate with the router, it sends requests to its IP in which it follows the MAC address from ARP Cache, but our hacker B has changed that IP address mapping of router in the ARP cache to his address, so all the requests will be redirected to him and first he grabs the information and then sends to the router</li><li>This is called Man In The Middle Attack <img loading="lazy" src="https://i.imgur.com/V6G5qfr.png" class="img_ev3q"></li><li>We again do in such a way where we want the router to send result back to us instead of A first</li><li>In Kali we use Ettercap to perform this attack</li><li><a href="https://www.youtube.com/watch?v=A7nih6SANYs" target="_blank" rel="noopener noreferrer">Procedure video</a> From 3:38</li><li>Using [<!-- -->[DNS Cache Poisoning]<!-- -->] you can make this attack more better</li></ul>]]></content:encoded>
            <category>arp</category>
            <category>arp-poisoning</category>
            <category>man-in-the-middle</category>
        </item>
    </channel>
</rss>